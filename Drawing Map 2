using System;

namespace HomeWork3
{
    class Program
    {
        private const ConsoleKey Up = ConsoleKey.UpArrow;
        private const ConsoleKey Down = ConsoleKey.DownArrow;
        private const ConsoleKey Left = ConsoleKey.LeftArrow;
        private const ConsoleKey Right = ConsoleKey.RightArrow;

        static void Main(string[] args)
        {
            Console.CursorVisible = false;

            char[,] map = new char[,] {
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', },
                {'#', 'X', ' ', '#', ' ', ' ', '#', ' ', ' ', 'X', ' ', ' ', '#', ' ', 'X', ' ', ' ', ' ', ' ', 'X', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', },
                {'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', 'X', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', },
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', }};
            int userPositionX = 9;
            int userPositionY = 9;
            char graundSymbol = ' ';
            char plaerSymbol = '\u0002';
            char treasureSymbol = 'X';
            char wallSymbol = '#';
            int collectedTreasures = 0;
            int allTreasures = 5;

            while (collectedTreasures < allTreasures)
            {
                DrawBag(collectedTreasures, allTreasures);
                DrawMap(map);
                DrawPlaer(userPositionX, userPositionY, plaerSymbol);
                ChoiceOfDirection(ref userPositionX, ref userPositionY, map, wallSymbol);
                TakeTreasure(userPositionX, userPositionY, ref collectedTreasures, treasureSymbol, graundSymbol, map);

                Console.Clear();
            }

            Console.WriteLine("Ты победил!!!");
        }

        static void DrawMap(char[,] map)
        {
            Console.SetCursorPosition(0, 0);

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }

        static void DrawPlaer(int userPositionX, int userPositionY, char plaerSymbol)
        {          
            Console.SetCursorPosition(userPositionY, userPositionX);
            Console.Write(plaerSymbol);
        }

        static void DrawBag(int countItem, int maxItem)
        {
            Console.SetCursorPosition(0, 15);
            Console.WriteLine($"Собранные сокровища {countItem}/{maxItem}");
        }

        static void MovePlayer(ref int userPositionX, ref int userPositionY, int deltaPositionX, int deltaPositionY, char[,] map, char wallSymbol)
        {
            if (map[userPositionX + deltaPositionX, userPositionY + deltaPositionY] != wallSymbol)
            {
                userPositionX += deltaPositionX;
                userPositionY += deltaPositionY;
            }
        }

        static void TakeTreasure(int userPositionX, int userPositionY, ref int collectedTreasures, char treasureSymbol, char graundSymbol, char[,] map)
        {
            if (map[userPositionX, userPositionY] == treasureSymbol)
            {
                map[userPositionX, userPositionY] = graundSymbol;
                collectedTreasures++;
            }
        }

        static void ChoiceOfDirection(ref int userPositionX, ref int userPositionY, char[,] map, char wallSymbol)
        {
            ConsoleKey userInput = Console.ReadKey().Key;

            switch (userInput)
            {
                case Up:
                    MovePlayer(ref userPositionX, ref userPositionY, -1, 0, map, wallSymbol);
                    break;
                case Down:
                    MovePlayer(ref userPositionX, ref userPositionY, 1, 0, map, wallSymbol);
                    break;
                case Left:
                    MovePlayer(ref userPositionX, ref userPositionY, 0, -1, map, wallSymbol);
                    break;
                case Right:
                    MovePlayer(ref userPositionX, ref userPositionY, 0, 1, map, wallSymbol);
                    break;
            }
        }
    }
}
