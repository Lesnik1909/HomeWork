using System;

namespace test
{
    class Program
    {
         static int ConvertToNumber(int[] binary)
        {
            int result = 0;
            for (int i = 0; i < binary.Length; i++)
            {
                result += binary[i] * Convert.ToInt32(Math.Pow(2, i));
            }
            return result;
        }
        static void DrawMap(char[,] map)
        {
            char[,] graficMap = new char[map.GetLength(0), map.GetLength(1)];
            int[] binary = new int[4];

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] == '#')
                    {
                        // проверка левой
                        if (j != 0)
                        {
                            if (map[i, j - 1] == '#')
                                binary[0] = 1;
                            else
                                binary[0] = 0;
                        }
                        else
                            binary[0] = 0;
                        // проверка верхней
                        if (i != 0)
                        {
                            if (map[i - 1, j] == '#')
                                binary[1] = 1;
                            else
                                binary[1] = 0;
                        }
                        else
                            binary[1] = 0;
                        // проверка правой
                        if (j != map.GetLength(1) - 1)
                        {
                            if (map[i, j + 1] == '#')
                                binary[2] = 1;
                            else
                                binary[2] = 0;
                        }
                        else
                            binary[2] = 0;
                        // проверка нижней
                        if (i != map.GetLength(0) - 1)
                        {
                            if (map[i + 1, j] == '#')
                                binary[3] = 1;
                            else
                                binary[3] = 0;
                        }
                        else
                            binary[3] = 0;

                        switch (ConvertToNumber(binary))
                        {
                            case 1:
                            case 4:
                            case 5:
                                graficMap[i, j] = '\u2550';
                                break;
                            case 2:
                            case 8:
                            case 10:
                                graficMap[i, j] = '\u2551';
                                break;
                            case 3:
                                graficMap[i, j] = '\u255D';
                                break;
                            case 6:
                                graficMap[i, j] = '\u255A';
                                break;
                            case 7:
                                graficMap[i, j] = '\u2569';
                                break;
                            case 9:
                                graficMap[i, j] = '\u2557';
                                break;
                            case 11:
                                graficMap[i, j] = '\u2563';
                                break;
                            case 12:
                                graficMap[i, j] = '\u2554';
                                break;
                            case 13:
                                graficMap[i, j] = '\u2566';
                                break;
                            case 14:
                                graficMap[i, j] = '\u2560';
                                break;
                            case 15:
                                graficMap[i, j] = '\u256C';
                                break;
                        }
                    }
                    else if (map[i, j] == '@')
                        graficMap[i, j] = '\u0002';
                    else
                        graficMap[i, j] = map[i, j];
                }
            }

            for (int i = 0; i < graficMap.GetLength(0); i++)
            {
                for (int j = 0; j < graficMap.GetLength(1); j++)
                {
                    Console.Write(graficMap[i, j]);
                }
                Console.WriteLine();
            }
        }
        static void Main(string[] args)
        {
            char[,] map = new char[,] {
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', },
                {'#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', },
                {'#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', },
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', }};

            DrawMap(map);
        }
    }
}
