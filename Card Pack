using System;
using System.Collections.Generic;

namespace HomeWork3
{ 
    class Program
    {
        private const ConsoleColor RedCard = ConsoleColor.Red;
        private const ConsoleColor BlackCard = ConsoleColor.Blue;

        private const string CommandTakeCards = "cards";
        private const string CommandTakeOneCard = "one";
        private const string CommandExit = "exit";

        static void Main(string[] args)
        {
            bool isWorking = true;
            int cardInPack = 0;
            string userInput;
            char[] cardSuit = new char[] { '\u2663', '\u2660', '\u2665', '\u2666' };
            string[] cardValue = new string[] { "T", "K", "D", "V", "10", "9", "8", "7", "6" };
            CardPack cardPack = new CardPack();
            CardPack playerHand = new CardPack();

            for (int i = 0; i < cardSuit.Length; i++)
            {
                for (int j = 0; j < cardValue.Length; j++)
                {
                    if (i < 2)
                    {
                        cardPack.AddCard(cardValue[j], cardSuit[i], BlackCard);
                        cardInPack++;
                    }
                    else
                    {
                        cardPack.AddCard(cardValue[j], cardSuit[i], RedCard);
                        cardInPack++;
                    }                   
                }
            }            

            while (isWorking)
            {
                Console.Clear();

                Console.SetCursorPosition(0, 10);
                Console.WriteLine($"{CommandTakeOneCard}   - Взять карту из колоды");
                Console.WriteLine($"{CommandTakeCards} - Взять несколько карт из колоды");
                Console.WriteLine($"{CommandExit}  - Выход");

                playerHand.ShowCards(60, 0, "Ваши карты:");
                cardPack.ShowCards(50, 0, "Колода:");

                Console.SetCursorPosition(0, 0);

                userInput = Console.ReadLine();

                switch(userInput)
                {
                    case CommandTakeOneCard:
                        TakeCard(ref cardInPack, cardPack, playerHand, true);
                        break;
                    case CommandTakeCards:
                        TakeCard(ref cardInPack, cardPack, playerHand, false);
                        break;
                    case CommandExit:
                        isWorking = false;
                        break;
                }
            }
        }
        
        static void TakeCard (ref int cardInPack, CardPack cardPack, CardPack playerHand, bool takeOne)
        {
            int randomValue;
            int cardCounter;
            Random random = new Random();

            if(takeOne)
            {
                cardCounter = 1;
            }
            else
            {
                Console.WriteLine("Сколько карт взять из колоды: ");
                int.TryParse(Console.ReadLine(), out cardCounter);
            }

            if ((cardCounter > cardInPack) || (cardCounter < 0))
            {
                Console.WriteLine("В колоде нет столько карт");
            }
            else
            {
                for (int i = 0; i < cardCounter; i++)
                {
                    randomValue = random.Next(0, cardPack.Pack.Count);
                    playerHand.CopyCard(randomValue, cardPack.Pack);
                    cardPack.RemoveCard(randomValue);
                    cardInPack--;
                }
            }   
        }
    }

    class Card
    {
        public string CardValue { get; private set; }
        public char CardSuit { get; private set; }
        public ConsoleColor CardColor { get; private set; }

        public Card (string value, char suit, ConsoleColor color)
        {
            CardSuit = suit;
            CardValue = value;
            CardColor = color;
        }

        public void ShowCard ()
        {
            Console.ForegroundColor = CardColor;
            Console.WriteLine($"{CardSuit}{CardValue}");
            Console.ResetColor();
        }
    }

    class CardPack
    {
        public List<Card> Pack;

        public CardPack ()
        {
            Pack = new List<Card>();
        }

        public void AddCard (string cardValue, char cardSuit, ConsoleColor cardColor)
        {
            Pack.Add(new Card(cardValue, cardSuit, cardColor));
        }

        public void CopyCard(int index, List<Card> firstPack)
        {
            Pack.Add(firstPack[index]);
        }

        public void RemoveCard (int index)
        {
            Pack.RemoveAt(index);
        }

        public void ShowCards (int positionX, int positionY, string text)
        {
            Console.SetCursorPosition(positionX, positionY);
            Console.WriteLine(text);
            foreach (var card in Pack)
            {
                Console.SetCursorPosition(positionX, ++positionY);
                card.ShowCard();
            }
        }
    }
}
