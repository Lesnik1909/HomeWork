using System;
using System.Collections.Generic;

namespace HomeWork3
{ 
    class Program
    {
        private const ConsoleColor Red = ConsoleColor.Red;
        private const ConsoleColor Black = ConsoleColor.Blue;

        private const string CommandTakeCards = "cards";
        private const string CommandTakeOneCard = "one";
        private const string CommandExit = "exit";

        static void Main(string[] args)
        {
            bool isWorking = true;
            string userInput;
            char[] cardSuits = new char[] { '\u2663', '\u2660', '\u2665', '\u2666' };
            ConsoleColor[] cardColors = new ConsoleColor[] { Black, Black, Red, Red };
            string[] cardValues = new string[] { "T", "K", "D", "V", "10", "9", "8", "7", "6" };
            CardPack cardPack = new CardPack();
            CardPack playerHand = new CardPack();

            for (int i = 0; i < cardSuits.Length; i++)
            {
                for (int j = 0; j < cardValues.Length; j++)
                {
                    cardPack.AddCard(cardValues[j], cardSuits[i], cardColors[i]);              
                }
            }

            Croupier croupier = new Croupier(cardPack, playerHand);

            while (isWorking)
            {
                Console.Clear();

                Console.SetCursorPosition(0, 10);
                Console.WriteLine($"{CommandTakeOneCard}   - Взять карту из колоды");
                Console.WriteLine($"{CommandTakeCards} - Взять несколько карт из колоды");
                Console.WriteLine($"{CommandExit}  - Выход");

                playerHand.ShowCards(60, 0, "Ваши карты:");
                cardPack.ShowCards(50, 0, "Колода:");

                Console.SetCursorPosition(0, 0);

                userInput = Console.ReadLine();

                switch(userInput)
                {
                    case CommandTakeOneCard:
                        croupier.TakeOneCard();
                        break;
                    case CommandTakeCards:
                        croupier.TakeCards();
                        break;
                    case CommandExit:
                        isWorking = false;
                        break;
                }
            }
        }
    }

    class Card
    {
        public string Value { get; private set; }
        public char Suit { get; private set; }
        public ConsoleColor Color { get; private set; }

        public Card (string value, char suit, ConsoleColor color)
        {
            Suit = suit;
            Value = value;
            Color = color;
        }

        public void ShowCard ()
        {
            Console.ForegroundColor = Color;
            Console.WriteLine($"{Suit}{Value}");
            Console.ResetColor();
        }
    }

    class CardPack
    {
        public List<Card> Pack { get; private set; }

        public CardPack ()
        {
            Pack = new List<Card>();
        }

        public void AddCard (string cardValue, char cardSuit, ConsoleColor cardColor)
        {
            Pack.Add(new Card(cardValue, cardSuit, cardColor));
        }

        public void CopyCard(int index, List<Card> firstPack)
        {
            Pack.Add(firstPack[index]);
        }

        public void RemoveCard (int index)
        {
            Pack.RemoveAt(index);
        }

        public int CardInPack()
        {
            return Pack.Count;
        }

        public void ShowCards (int positionX, int positionY, string text)
        {
            Console.SetCursorPosition(positionX, positionY);
            Console.WriteLine(text);
            foreach (var card in Pack)
            {
                Console.SetCursorPosition(positionX, ++positionY);
                card.ShowCard();
            }
        }
    }

    class Croupier
    {
        private CardPack _cardsPack;
        private CardPack _playerHand;

        public Croupier(CardPack pack, CardPack hand)
        {
            _cardsPack = pack;
            _playerHand = hand;
        }

        public void TakeOneCard()
        {
            int randomValue;
            Random random = new Random();

            if (_cardsPack.CardInPack() > 0)
            {
                randomValue = random.Next(0, _cardsPack.CardInPack());
                _playerHand.CopyCard(randomValue, _cardsPack.Pack);
                _cardsPack.RemoveCard(randomValue);
            }
            else
            {
                Console.WriteLine("Колода пуста");
                Console.ReadKey();
            }
        }

        public void TakeCards()
        {
            int randomValue;
            Random random = new Random();

            Console.WriteLine("Сколько карт взять из колоды: ");
            int.TryParse(Console.ReadLine(), out int cardCounter);

            if ((cardCounter > _cardsPack.CardInPack()) || (cardCounter < 0))
            {
                Console.WriteLine("В колоде нет столько карт");
                Console.ReadKey();
            }
            else
            {
                for (int i = 0; i < cardCounter; i++)
                {
                    randomValue = random.Next(0, _cardsPack.CardInPack());
                    _playerHand.CopyCard(randomValue, _cardsPack.Pack);
                    _cardsPack.RemoveCard(randomValue);
                }
            }
        }
    }
}
